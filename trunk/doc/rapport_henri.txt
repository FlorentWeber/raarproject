
Runtime Chapter

   MPI is used as a runtime, it implements a lot of functions for the communications between the processes. However, MPI do not implement things like the timeout, the exact site to run the processes (for example, to fix the prototype manager to a certain site or to set a process to a certain location because LAM will run by rank. So it depends on the user to choose where the processes will run instead of the program).

   First, this file have some functions that will print the different states of the execution. We also have put some functions to generate a dot file so that we can have a view of it and be able to save it.
   The other thing that we had implemented, is the choice between transitions. This choice is taken by the communication place manager.

   The runtime is not a file generated by the code generator. Indeed, in order to clear the msst file from functions that not depend on the model's tree, we put them aside to generate functions that really use the model's tree.


MAKEFILE, THE STRUCTURE OF THE PROJECT AND SCRIPTS Chapter

THE MAKEFILE part


   First, in order to be able to build the project, we must put the path of metascribe in CONTAINER_TDIR and we need to use the gnat right (for example : the ocarina polyorb's gnat).

   The first rule that the Makefile must run, is 'generate'. This rule will use superclean and after, will check if the directory JDT exists and if it have msm files inside.
 
   If it pass the check, it will run rules-generator and tengine-generator which will compile and create the binary files of the code generator.
 
  To launch the generation of the MPI's source, we will use the rule 'test-pour-fk'. The protocol, that we have to follow, says that we must put the name of the msm without -main.msm. So in order to execute the test, we must write : 

    make test-pour-fk NAME=<NAME> TIME=<TIME>,

where <NAME> is the name of the file without -main.msm. The rule will automatically search into the JDT directory and check with the script check.sh if the file exists. If it pass the test, it will generate a source, a header and a script of the generated code.
The TIME is optional. It is an option to give to the user, the possibility to change the duration of the test. Indeed, some models need longer execution than other. If TIME is not defined, it is initialized at 20 secondes.

    The script check.sh will execute the script generated : test-generator.sh. This script contains the number of node that we have to run. Indeed, the only way to know the number of nodes or processes that we have to execute, is determined in the generated code's stage. We can also use it to create the bhost file.

   So with the number of nodes, we can call the Makefile's rule : test-generator, with : 

   make test-generator NAME=<NAME> NUM=NB_NODES TIME=<TIME>. 

   This rule will compile the source into object and with the runtime, it will create a binary. Then, the rule will launch mpirun with the right arguments and the script test-generator.sh will run the execution.

   We also had created a rule to generate dot files : 
 
   make dot NAME=<NAME> TIME=<TIME>


STRUCTURE OF THE PROJECT part


    The project will be organize into many directory. In order to have a clear view of the files, we will put all the msm files into the directory JDT. In JDT directory, we will create one called image where we put all the petri net's pictures. In the directory called Coloane, we will put all the .model's files that contain models of the petri net that we have created.

   To not fill the root directory with source and object files. We move all the adb, ads, o and ali files into the directory generator.

   For the generated code, we put it in src directory, the header in include, the object files in obj and binary in bin. If we generate dot files, we put them into the dot directory.

   We choose to not generate the runtime codes with metascribe because they don't depend on parameters like the number of processes... . So we put them in the runtime directory with his header.

   So files, that we have not generated, are : the runtime, the Makefile, the msm, msf, msst and mssm files, the script check.sh and all the report files.
 
   We also have created a ModelParser in order to generate a msm file from a model file created by Coloane.


THE SCRIPTS part


   In the project, we will use 2 scripts. One is done by us and the other one, it will be generate by the code generator.
  
   For the first one, the script will create directories if they don't exist and check if there are msm files JDT directory. If not, it will send an error message and ask the user to create msm files and to put them into the JDT directory.
This script will also call the code generator if we give it 3 arguments : One is the name of the file without -main.msm, the other is the kind of the execution (TEST or DOT) and the third is optional, it is the duration of the program that by default, it is at 20 secondes.

Indeed, in order to run the project, we will have to call the code generator with the right msm file. If the file doesn't exist, we must send an error message and invite the user to use an existing msm file.

After the file is check, we can call the code generator and then call the script generated by it.

   So, the second script is generated by the code generator. We have the name of the file, however, we don't know how many processes we will have to run. 
 The code generator will create a script that know how many nodes we need. So for the bhost, if the number of ip address or host names are lower than the number of nodes required, the script will rewrite and set the localhost with the number of cpu that represents the number of nodes we need.

   So the script will run the test-generator rule of the makefile with the name et the number of nodes as arguments. So the makefile will launch  : LAM, the compilation of the files and run mpirun with the right number of nodes.


THE BHOST chapter


-Configuration of the bhost file part

   The bhost file is created by the generated script : test-generator.sh. We cannot write the ip address or host names into the file because we don't know the topology of the network. So the location of the different processes must be defined by the user.

   However, the generated bhost will contain the number of cpus which is in reality the number of nodes that we need to run the project. 

   In the beginning, we thought about regrouping the processes that need a lot of communication. 
Indeed, if these communications were done on the same computer, we will gain a lot of time. In order to do that, we were thinking about using the argument 'cpu' that is set after the ip address or host name (ip adress cpu=NB_CPU). 
This argument will make the following rank to execute in the same location. 
For example, if we set the first addess ip : 127.0.0.1 cpu=2, the rank 0 will be 127.0.0.1, rank 1 : 127.0.0.1 and the rank 2 will be the ip address of the second line.
So, with this, we can put the process in an ideal order to set the process with a lot of communication near each other. 
But due to a lack of time, we only put the local address and the number of nodes in the cpu argument and let the user fill as it want with the right number of nodes.

 
- Place of the process by rank.

  In order to organize the execution, we allocate the rank 0 to the prototype manager, the rank 1 to the synchronization transition manager, the rank 2 to the communication place manager and above 2 (3 and more) we allocate them to the PNprocesses. The problem is that we must follow this order to ensure the execution.